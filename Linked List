1.Reverse linked list

#Iterative method
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
    
class Linkedlist:
    def __init__(self):
        self.head=None
        
    def  reverse(self):
        prev=None
        curr=self.head
        while(curr is not None):
            next=curr.next
            curr.next=prev
            prev=curr
            curr=next
        self.head=prev
        
    def push(self,new_data):
        new_node=Node(new_data)
        new_node.next=self.head
        self.head=new_node
        
    def printlist(self):
        temp=self.head
        while(temp):
            print(temp.data)
            temp=temp.next
            
#Driver unicode
lst=Linkedlist()
lst.push(1)
lst.push(2)
lst.push(3)
lst.push(4)
lst.push(5)
print("Given Linkedlist is  ")
lst.printlist()
print("\nReversed linked list is: ")
lst.reverse()
lst.printlist()

output:
Given Linkedlist is  
5
4
3
2
1

Reversed linked list is: 
1
2
3
4
5
Time Complexity: O(n) 
Auxiliary Space: O(1)
________________________________________________________________________________________
#Recursive method

"""Python3 program to reverse linked list
using recursive method"""
  
# Linked List Node
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
  
# Create and Handle list operations
class LinkedList:
    def __init__(self):
        self.head = None # Head of list
  
    # Method to reverse the list
    def reverse(self, head):
  
        # If head is empty or has reached the list end
        if head is None or head.next is None:
            return head
  
        # Reverse the rest list
        rest = self.reverse(head.next)
  
        # Put first element at the end
        head.next.next = head
        head.next = None
  
        # Fix the header pointer
        return rest
  
    # Returns the linked list in display format
    def __str__(self):
        linkedListStr = ""
        temp = self.head
        while temp:
            linkedListStr = (linkedListStr + 
                            str(temp.data) + " ")
            temp = temp.next
        return linkedListStr
  
    # Pushes new data to the head of the list
    def push(self, data):
        temp = Node(data)
        temp.next = self.head
        self.head = temp
  
# Driver code
linkedList = LinkedList()
linkedList.push(20)
linkedList.push(4)
linkedList.push(15)
linkedList.push(85)
print("Given linked list")
print(linkedList)
linkedList.head = linkedList.reverse(linkedList.head)
print("Reversed linked list")
print(linkedList)

Output: 

Given linked list
85 15 4 20 
Reversed Linked list
20 4 15 85
Time Complexity: O(n) 
Auxiliary Space: O(n)
__________________________________________________________________________________
# Using stack
  
# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
  
  
class Solution:
    # Program to reverse the linked list
    # using stack
    def reverseLLUsingStack(self, head):
         
        # Initialise the variables
        stack, temp = [], head
          
        while temp:
            stack.append(temp)
            temp = temp.next
        head = temp = stack.pop()
          
        # Until stack is not 
        # empty
        while len(stack) > 0:
            temp.next = stack.pop()
            temp = temp.next
        temp.next = None
        return head
  
# Driver Code
if __name__ == "__main__":
    head = ListNode(1, ListNode(2, ListNode(3, 
                        ListNode(4, ListNode(5)))))
    obj = Solution()
    head = obj.reverseLLUsingStack(head)
    while head:
        print(head.val, end=' ')
        head = head.next
        
Output
Given linked list
1 2 3 4 
Reversed linked list
4 3 2 1  

Time Complexity: O(N)
    As we do certain operation for every node of the linked list.
Auxiliary Space: O(N)
    Space is used to store the nodes in the stack.
###################################################################################################
2.


